// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace game {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Game {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_game_GameRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::game.GameRequest, global::game.GameRequest.Builder> internal__static_game_GameRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_game_GameReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::game.GameReply, global::game.GameReply.Builder> internal__static_game_GameReply__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_game_Value__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::game.Value, global::game.Value.Builder> internal__static_game_Value__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Game() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90b3MvZ2FtZS5wcm90bxIEZ2FtZSI/CgtHYW1lUmVxdWVzdBITCgtt", 
            "ZXNzYWdlVHlwZRgBIAIoCRIbCgZ2YWx1ZXMYAiADKAsyCy5nYW1lLlZhbHVl", 
            "Ij0KCUdhbWVSZXBseRITCgttZXNzYWdlVHlwZRgBIAIoCRIbCgZ2YWx1ZXMY", 
            "AiADKAsyCy5nYW1lLlZhbHVlItUCCgVWYWx1ZRImCghkYXRhdHlwZRgBIAIo", 
            "DjIULmdhbWUuVmFsdWUuRGF0YXR5cGUSEAoIc3RyVmFsdWUYAiABKAkSEgoK", 
            "aW50MzJWYWx1ZRgDIAEoBRITCgt1aW50MzJWYWx1ZRgEIAEoDRISCgppbnQ2", 
            "NFZhbHVlGAUgASgDEhMKC3VpbnQ2NFZhbHVlGAYgASgEEhMKC2RvdWJsZVZh", 
            "bHVlGAcgASgBEhIKCmZsb2F0VmFsdWUYCCABKAISEQoJYm9vbFZhbHVlGAkg", 
            "ASgIEhIKCmJ5dGVzVmFsdWUYCiABKAwicAoIRGF0YXR5cGUSCgoGU1RSSU5H", 
            "EAASCQoFSU5UMzIQARIKCgZVSU5UMzIQAhIJCgVJTlQ2NBADEgoKBlVJTlQ2", 
            "NBAEEgoKBkRPVUJMRRAFEgkKBUZMT0FUEAYSCAoEQk9PTBAHEgkKBUJZVEVT", 
          "EAg="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_game_GameRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_game_GameRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::game.GameRequest, global::game.GameRequest.Builder>(internal__static_game_GameRequest__Descriptor,
                new string[] { "MessageType", "Values", });
        internal__static_game_GameReply__Descriptor = Descriptor.MessageTypes[1];
        internal__static_game_GameReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::game.GameReply, global::game.GameReply.Builder>(internal__static_game_GameReply__Descriptor,
                new string[] { "MessageType", "Values", });
        internal__static_game_Value__Descriptor = Descriptor.MessageTypes[2];
        internal__static_game_Value__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::game.Value, global::game.Value.Builder>(internal__static_game_Value__Descriptor,
                new string[] { "Datatype", "StrValue", "Int32Value", "Uint32Value", "Int64Value", "Uint64Value", "DoubleValue", "FloatValue", "BoolValue", "BytesValue", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameRequest : pb::GeneratedMessage<GameRequest, GameRequest.Builder> {
    private GameRequest() { }
    private static readonly GameRequest defaultInstance = new GameRequest().MakeReadOnly();
    private static readonly string[] _gameRequestFieldNames = new string[] { "messageType", "values" };
    private static readonly uint[] _gameRequestFieldTags = new uint[] { 10, 18 };
    public static GameRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::game.Game.internal__static_game_GameRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameRequest, GameRequest.Builder> InternalFieldAccessors {
      get { return global::game.Game.internal__static_game_GameRequest__FieldAccessorTable; }
    }
    
    public const int MessageTypeFieldNumber = 1;
    private bool hasMessageType;
    private string messageType_ = "";
    public bool HasMessageType {
      get { return hasMessageType; }
    }
    public string MessageType {
      get { return messageType_; }
    }
    
    public const int ValuesFieldNumber = 2;
    private pbc::PopsicleList<global::game.Value> values_ = new pbc::PopsicleList<global::game.Value>();
    public scg::IList<global::game.Value> ValuesList {
      get { return values_; }
    }
    public int ValuesCount {
      get { return values_.Count; }
    }
    public global::game.Value GetValues(int index) {
      return values_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageType) return false;
        foreach (global::game.Value element in ValuesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameRequestFieldNames;
      if (hasMessageType) {
        output.WriteString(1, field_names[0], MessageType);
      }
      if (values_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], values_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MessageType);
      }
      foreach (global::game.Value element in ValuesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameRequest MakeReadOnly() {
      values_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameRequest result;
      
      private GameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GameRequest original = result;
          result = new GameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::game.GameRequest.Descriptor; }
      }
      
      public override GameRequest DefaultInstanceForType {
        get { return global::game.GameRequest.DefaultInstance; }
      }
      
      public override GameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameRequest) {
          return MergeFrom((GameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameRequest other) {
        if (other == global::game.GameRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageType) {
          MessageType = other.MessageType;
        }
        if (other.values_.Count != 0) {
          result.values_.Add(other.values_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageType = input.ReadString(ref result.messageType_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.values_, global::game.Value.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageType {
        get { return result.hasMessageType; }
      }
      public string MessageType {
        get { return result.MessageType; }
        set { SetMessageType(value); }
      }
      public Builder SetMessageType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageType = true;
        result.messageType_ = value;
        return this;
      }
      public Builder ClearMessageType() {
        PrepareBuilder();
        result.hasMessageType = false;
        result.messageType_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::game.Value> ValuesList {
        get { return PrepareBuilder().values_; }
      }
      public int ValuesCount {
        get { return result.ValuesCount; }
      }
      public global::game.Value GetValues(int index) {
        return result.GetValues(index);
      }
      public Builder SetValues(int index, global::game.Value value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.values_[index] = value;
        return this;
      }
      public Builder SetValues(int index, global::game.Value.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.values_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValues(global::game.Value value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.values_.Add(value);
        return this;
      }
      public Builder AddValues(global::game.Value.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.values_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValues(scg::IEnumerable<global::game.Value> values) {
        PrepareBuilder();
        result.values_.Add(values);
        return this;
      }
      public Builder ClearValues() {
        PrepareBuilder();
        result.values_.Clear();
        return this;
      }
    }
    static GameRequest() {
      object.ReferenceEquals(global::game.Game.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameReply : pb::GeneratedMessage<GameReply, GameReply.Builder> {
    private GameReply() { }
    private static readonly GameReply defaultInstance = new GameReply().MakeReadOnly();
    private static readonly string[] _gameReplyFieldNames = new string[] { "messageType", "values" };
    private static readonly uint[] _gameReplyFieldTags = new uint[] { 10, 18 };
    public static GameReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::game.Game.internal__static_game_GameReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameReply, GameReply.Builder> InternalFieldAccessors {
      get { return global::game.Game.internal__static_game_GameReply__FieldAccessorTable; }
    }
    
    public const int MessageTypeFieldNumber = 1;
    private bool hasMessageType;
    private string messageType_ = "";
    public bool HasMessageType {
      get { return hasMessageType; }
    }
    public string MessageType {
      get { return messageType_; }
    }
    
    public const int ValuesFieldNumber = 2;
    private pbc::PopsicleList<global::game.Value> values_ = new pbc::PopsicleList<global::game.Value>();
    public scg::IList<global::game.Value> ValuesList {
      get { return values_; }
    }
    public int ValuesCount {
      get { return values_.Count; }
    }
    public global::game.Value GetValues(int index) {
      return values_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageType) return false;
        foreach (global::game.Value element in ValuesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameReplyFieldNames;
      if (hasMessageType) {
        output.WriteString(1, field_names[0], MessageType);
      }
      if (values_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], values_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMessageType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MessageType);
      }
      foreach (global::game.Value element in ValuesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameReply MakeReadOnly() {
      values_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameReply result;
      
      private GameReply PrepareBuilder() {
        if (resultIsReadOnly) {
          GameReply original = result;
          result = new GameReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::game.GameReply.Descriptor; }
      }
      
      public override GameReply DefaultInstanceForType {
        get { return global::game.GameReply.DefaultInstance; }
      }
      
      public override GameReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameReply) {
          return MergeFrom((GameReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameReply other) {
        if (other == global::game.GameReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageType) {
          MessageType = other.MessageType;
        }
        if (other.values_.Count != 0) {
          result.values_.Add(other.values_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageType = input.ReadString(ref result.messageType_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.values_, global::game.Value.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageType {
        get { return result.hasMessageType; }
      }
      public string MessageType {
        get { return result.MessageType; }
        set { SetMessageType(value); }
      }
      public Builder SetMessageType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageType = true;
        result.messageType_ = value;
        return this;
      }
      public Builder ClearMessageType() {
        PrepareBuilder();
        result.hasMessageType = false;
        result.messageType_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::game.Value> ValuesList {
        get { return PrepareBuilder().values_; }
      }
      public int ValuesCount {
        get { return result.ValuesCount; }
      }
      public global::game.Value GetValues(int index) {
        return result.GetValues(index);
      }
      public Builder SetValues(int index, global::game.Value value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.values_[index] = value;
        return this;
      }
      public Builder SetValues(int index, global::game.Value.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.values_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddValues(global::game.Value value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.values_.Add(value);
        return this;
      }
      public Builder AddValues(global::game.Value.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.values_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeValues(scg::IEnumerable<global::game.Value> values) {
        PrepareBuilder();
        result.values_.Add(values);
        return this;
      }
      public Builder ClearValues() {
        PrepareBuilder();
        result.values_.Clear();
        return this;
      }
    }
    static GameReply() {
      object.ReferenceEquals(global::game.Game.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Value : pb::GeneratedMessage<Value, Value.Builder> {
    private Value() { }
    private static readonly Value defaultInstance = new Value().MakeReadOnly();
    private static readonly string[] _valueFieldNames = new string[] { "boolValue", "bytesValue", "datatype", "doubleValue", "floatValue", "int32Value", "int64Value", "strValue", "uint32Value", "uint64Value" };
    private static readonly uint[] _valueFieldTags = new uint[] { 72, 82, 8, 57, 69, 24, 40, 18, 32, 48 };
    public static Value DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Value DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Value ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::game.Game.internal__static_game_Value__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Value, Value.Builder> InternalFieldAccessors {
      get { return global::game.Game.internal__static_game_Value__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Datatype {
        STRING = 0,
        INT32 = 1,
        UINT32 = 2,
        INT64 = 3,
        UINT64 = 4,
        DOUBLE = 5,
        FLOAT = 6,
        BOOL = 7,
        BYTES = 8,
      }
      
    }
    #endregion
    
    public const int DatatypeFieldNumber = 1;
    private bool hasDatatype;
    private global::game.Value.Types.Datatype datatype_ = global::game.Value.Types.Datatype.STRING;
    public bool HasDatatype {
      get { return hasDatatype; }
    }
    public global::game.Value.Types.Datatype Datatype {
      get { return datatype_; }
    }
    
    public const int StrValueFieldNumber = 2;
    private bool hasStrValue;
    private string strValue_ = "";
    public bool HasStrValue {
      get { return hasStrValue; }
    }
    public string StrValue {
      get { return strValue_; }
    }
    
    public const int Int32ValueFieldNumber = 3;
    private bool hasInt32Value;
    private int int32Value_;
    public bool HasInt32Value {
      get { return hasInt32Value; }
    }
    public int Int32Value {
      get { return int32Value_; }
    }
    
    public const int Uint32ValueFieldNumber = 4;
    private bool hasUint32Value;
    private uint uint32Value_;
    public bool HasUint32Value {
      get { return hasUint32Value; }
    }
    [global::System.CLSCompliant(false)]
    public uint Uint32Value {
      get { return uint32Value_; }
    }
    
    public const int Int64ValueFieldNumber = 5;
    private bool hasInt64Value;
    private long int64Value_;
    public bool HasInt64Value {
      get { return hasInt64Value; }
    }
    public long Int64Value {
      get { return int64Value_; }
    }
    
    public const int Uint64ValueFieldNumber = 6;
    private bool hasUint64Value;
    private ulong uint64Value_;
    public bool HasUint64Value {
      get { return hasUint64Value; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Uint64Value {
      get { return uint64Value_; }
    }
    
    public const int DoubleValueFieldNumber = 7;
    private bool hasDoubleValue;
    private double doubleValue_;
    public bool HasDoubleValue {
      get { return hasDoubleValue; }
    }
    public double DoubleValue {
      get { return doubleValue_; }
    }
    
    public const int FloatValueFieldNumber = 8;
    private bool hasFloatValue;
    private float floatValue_;
    public bool HasFloatValue {
      get { return hasFloatValue; }
    }
    public float FloatValue {
      get { return floatValue_; }
    }
    
    public const int BoolValueFieldNumber = 9;
    private bool hasBoolValue;
    private bool boolValue_;
    public bool HasBoolValue {
      get { return hasBoolValue; }
    }
    public bool BoolValue {
      get { return boolValue_; }
    }
    
    public const int BytesValueFieldNumber = 10;
    private bool hasBytesValue;
    private pb::ByteString bytesValue_ = pb::ByteString.Empty;
    public bool HasBytesValue {
      get { return hasBytesValue; }
    }
    public pb::ByteString BytesValue {
      get { return bytesValue_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDatatype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _valueFieldNames;
      if (hasDatatype) {
        output.WriteEnum(1, field_names[2], (int) Datatype, Datatype);
      }
      if (hasStrValue) {
        output.WriteString(2, field_names[7], StrValue);
      }
      if (hasInt32Value) {
        output.WriteInt32(3, field_names[5], Int32Value);
      }
      if (hasUint32Value) {
        output.WriteUInt32(4, field_names[8], Uint32Value);
      }
      if (hasInt64Value) {
        output.WriteInt64(5, field_names[6], Int64Value);
      }
      if (hasUint64Value) {
        output.WriteUInt64(6, field_names[9], Uint64Value);
      }
      if (hasDoubleValue) {
        output.WriteDouble(7, field_names[3], DoubleValue);
      }
      if (hasFloatValue) {
        output.WriteFloat(8, field_names[4], FloatValue);
      }
      if (hasBoolValue) {
        output.WriteBool(9, field_names[0], BoolValue);
      }
      if (hasBytesValue) {
        output.WriteBytes(10, field_names[1], BytesValue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDatatype) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Datatype);
      }
      if (hasStrValue) {
        size += pb::CodedOutputStream.ComputeStringSize(2, StrValue);
      }
      if (hasInt32Value) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Int32Value);
      }
      if (hasUint32Value) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Uint32Value);
      }
      if (hasInt64Value) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, Int64Value);
      }
      if (hasUint64Value) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, Uint64Value);
      }
      if (hasDoubleValue) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, DoubleValue);
      }
      if (hasFloatValue) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, FloatValue);
      }
      if (hasBoolValue) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, BoolValue);
      }
      if (hasBytesValue) {
        size += pb::CodedOutputStream.ComputeBytesSize(10, BytesValue);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Value ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Value ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Value ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Value ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Value ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Value ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Value ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Value ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Value ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Value ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Value MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Value prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Value, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Value cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Value result;
      
      private Value PrepareBuilder() {
        if (resultIsReadOnly) {
          Value original = result;
          result = new Value();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Value MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::game.Value.Descriptor; }
      }
      
      public override Value DefaultInstanceForType {
        get { return global::game.Value.DefaultInstance; }
      }
      
      public override Value BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Value) {
          return MergeFrom((Value) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Value other) {
        if (other == global::game.Value.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDatatype) {
          Datatype = other.Datatype;
        }
        if (other.HasStrValue) {
          StrValue = other.StrValue;
        }
        if (other.HasInt32Value) {
          Int32Value = other.Int32Value;
        }
        if (other.HasUint32Value) {
          Uint32Value = other.Uint32Value;
        }
        if (other.HasInt64Value) {
          Int64Value = other.Int64Value;
        }
        if (other.HasUint64Value) {
          Uint64Value = other.Uint64Value;
        }
        if (other.HasDoubleValue) {
          DoubleValue = other.DoubleValue;
        }
        if (other.HasFloatValue) {
          FloatValue = other.FloatValue;
        }
        if (other.HasBoolValue) {
          BoolValue = other.BoolValue;
        }
        if (other.HasBytesValue) {
          BytesValue = other.BytesValue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_valueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _valueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.datatype_, out unknown)) {
                result.hasDatatype = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasStrValue = input.ReadString(ref result.strValue_);
              break;
            }
            case 24: {
              result.hasInt32Value = input.ReadInt32(ref result.int32Value_);
              break;
            }
            case 32: {
              result.hasUint32Value = input.ReadUInt32(ref result.uint32Value_);
              break;
            }
            case 40: {
              result.hasInt64Value = input.ReadInt64(ref result.int64Value_);
              break;
            }
            case 48: {
              result.hasUint64Value = input.ReadUInt64(ref result.uint64Value_);
              break;
            }
            case 57: {
              result.hasDoubleValue = input.ReadDouble(ref result.doubleValue_);
              break;
            }
            case 69: {
              result.hasFloatValue = input.ReadFloat(ref result.floatValue_);
              break;
            }
            case 72: {
              result.hasBoolValue = input.ReadBool(ref result.boolValue_);
              break;
            }
            case 82: {
              result.hasBytesValue = input.ReadBytes(ref result.bytesValue_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDatatype {
       get { return result.hasDatatype; }
      }
      public global::game.Value.Types.Datatype Datatype {
        get { return result.Datatype; }
        set { SetDatatype(value); }
      }
      public Builder SetDatatype(global::game.Value.Types.Datatype value) {
        PrepareBuilder();
        result.hasDatatype = true;
        result.datatype_ = value;
        return this;
      }
      public Builder ClearDatatype() {
        PrepareBuilder();
        result.hasDatatype = false;
        result.datatype_ = global::game.Value.Types.Datatype.STRING;
        return this;
      }
      
      public bool HasStrValue {
        get { return result.hasStrValue; }
      }
      public string StrValue {
        get { return result.StrValue; }
        set { SetStrValue(value); }
      }
      public Builder SetStrValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrValue = true;
        result.strValue_ = value;
        return this;
      }
      public Builder ClearStrValue() {
        PrepareBuilder();
        result.hasStrValue = false;
        result.strValue_ = "";
        return this;
      }
      
      public bool HasInt32Value {
        get { return result.hasInt32Value; }
      }
      public int Int32Value {
        get { return result.Int32Value; }
        set { SetInt32Value(value); }
      }
      public Builder SetInt32Value(int value) {
        PrepareBuilder();
        result.hasInt32Value = true;
        result.int32Value_ = value;
        return this;
      }
      public Builder ClearInt32Value() {
        PrepareBuilder();
        result.hasInt32Value = false;
        result.int32Value_ = 0;
        return this;
      }
      
      public bool HasUint32Value {
        get { return result.hasUint32Value; }
      }
      [global::System.CLSCompliant(false)]
      public uint Uint32Value {
        get { return result.Uint32Value; }
        set { SetUint32Value(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUint32Value(uint value) {
        PrepareBuilder();
        result.hasUint32Value = true;
        result.uint32Value_ = value;
        return this;
      }
      public Builder ClearUint32Value() {
        PrepareBuilder();
        result.hasUint32Value = false;
        result.uint32Value_ = 0;
        return this;
      }
      
      public bool HasInt64Value {
        get { return result.hasInt64Value; }
      }
      public long Int64Value {
        get { return result.Int64Value; }
        set { SetInt64Value(value); }
      }
      public Builder SetInt64Value(long value) {
        PrepareBuilder();
        result.hasInt64Value = true;
        result.int64Value_ = value;
        return this;
      }
      public Builder ClearInt64Value() {
        PrepareBuilder();
        result.hasInt64Value = false;
        result.int64Value_ = 0L;
        return this;
      }
      
      public bool HasUint64Value {
        get { return result.hasUint64Value; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Uint64Value {
        get { return result.Uint64Value; }
        set { SetUint64Value(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUint64Value(ulong value) {
        PrepareBuilder();
        result.hasUint64Value = true;
        result.uint64Value_ = value;
        return this;
      }
      public Builder ClearUint64Value() {
        PrepareBuilder();
        result.hasUint64Value = false;
        result.uint64Value_ = 0UL;
        return this;
      }
      
      public bool HasDoubleValue {
        get { return result.hasDoubleValue; }
      }
      public double DoubleValue {
        get { return result.DoubleValue; }
        set { SetDoubleValue(value); }
      }
      public Builder SetDoubleValue(double value) {
        PrepareBuilder();
        result.hasDoubleValue = true;
        result.doubleValue_ = value;
        return this;
      }
      public Builder ClearDoubleValue() {
        PrepareBuilder();
        result.hasDoubleValue = false;
        result.doubleValue_ = 0D;
        return this;
      }
      
      public bool HasFloatValue {
        get { return result.hasFloatValue; }
      }
      public float FloatValue {
        get { return result.FloatValue; }
        set { SetFloatValue(value); }
      }
      public Builder SetFloatValue(float value) {
        PrepareBuilder();
        result.hasFloatValue = true;
        result.floatValue_ = value;
        return this;
      }
      public Builder ClearFloatValue() {
        PrepareBuilder();
        result.hasFloatValue = false;
        result.floatValue_ = 0F;
        return this;
      }
      
      public bool HasBoolValue {
        get { return result.hasBoolValue; }
      }
      public bool BoolValue {
        get { return result.BoolValue; }
        set { SetBoolValue(value); }
      }
      public Builder SetBoolValue(bool value) {
        PrepareBuilder();
        result.hasBoolValue = true;
        result.boolValue_ = value;
        return this;
      }
      public Builder ClearBoolValue() {
        PrepareBuilder();
        result.hasBoolValue = false;
        result.boolValue_ = false;
        return this;
      }
      
      public bool HasBytesValue {
        get { return result.hasBytesValue; }
      }
      public pb::ByteString BytesValue {
        get { return result.BytesValue; }
        set { SetBytesValue(value); }
      }
      public Builder SetBytesValue(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBytesValue = true;
        result.bytesValue_ = value;
        return this;
      }
      public Builder ClearBytesValue() {
        PrepareBuilder();
        result.hasBytesValue = false;
        result.bytesValue_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Value() {
      object.ReferenceEquals(global::game.Game.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
